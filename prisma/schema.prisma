generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model article {
  id         Int         @id @default(autoincrement())
  code       String?     @db.VarChar(255)
  article    String      @db.VarChar(255)
  categoryId Int?
  status     String      @db.VarChar(255)
  category   category?   @relation(fields: [categoryId], references: [id])
  inventory  inventory[]

  @@index([categoryId], map: "article_categoryId_fkey")
}

model category {
  id            Int       @id @default(autoincrement())
  code          String?   @db.VarChar(255)
  category_name String    @db.VarChar(255)
  status        String
  article       article[]
}

model inventory {
  id                Int            @id @default(autoincrement())
  articleId         Int?
  description       String         @db.Text
  date_acquired     DateTime       @db.Date
  property_number   String
  quantity          Int
  unit_value        Float          @db.Float
  received_date     DateTime       @db.Date
  registered_status String         @db.VarChar(255)
  temp_name         String         @db.VarChar(255)
  status            String         @db.VarChar(255)
  attachment        String         @db.VarChar(255)
  remarks           String         @db.Text
  in_status         Int
  pipSid            String?
  article           article?       @relation(fields: [articleId], references: [id])
  pip               pip?           @relation(fields: [pipSid], references: [sid])
  propertylogs      propertylogs[]

  @@index([articleId], map: "inventory_articleId_fkey")
  @@index([pipSid], map: "inventory_pipSid_fkey")
}

model pip {
  sid          String         @id
  name_f       String
  name_m       String
  name_l       String
  inventory    inventory[]
  propertylogs propertylogs[]
}

model propertylogs {
  id                Int        @id @default(autoincrement())
  inventoryId       Int?
  received_date     DateTime   @db.Date
  registered_status String     @db.VarChar(255)
  pipSid            String?
  temp_name         String     @db.VarChar(255)
  status            String     @db.VarChar(255)
  attachment        String     @db.VarChar(255)
  remarks           String     @db.Text
  inventory         inventory? @relation(fields: [inventoryId], references: [id])
  pip               pip?       @relation(fields: [pipSid], references: [sid])

  @@index([inventoryId], map: "propertylogs_inventoryId_fkey")
  @@index([pipSid], map: "propertylogs_pipSid_fkey")
}

model user {
  id        Int      @id @default(autoincrement())
  username  String   @unique(map: "User_username_key")
  email     String   @unique(map: "User_email_key")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime
}
